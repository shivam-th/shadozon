Cart Slice & Reducer:

- create "cartSlice.js" under slices

cartSlice.js - 
import { createSlice } from "@reduxjs/toolkit";

const initialState = localStorage.getItem("cart")
  ? JSON.parse(localStorage.getItem("cart"))
  : { cartItems: [] };

const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {},
});

export default cartSlice.reducer;


store.js -
import cartSliceReducer from "./slices/cartSlice";
reducer: {
[apiSlice.reducerPath]: apiSlice.reducer,
cart: cartSliceReducer,
},

==============================================================================================
Add to Cart Function:

cartSlice.js -

const addDecimals = (num) => {
  return (Math.round(num * 100) / 100).toFixed(2);
};
const cartSlice = createSlice({
  reducers: {
    addToCart: (state, action) => {
      const item = action.payload;
      const existItem = state.cartItems.find((x) => x._id === item.id);

      if (existItem) {
        state.cartItems = state.cartItems.map((x) =>
          x._id === existItem._id ? item : x
        );
      } else {
        state.cartItems = [...state.cartItems, item];
      }

      //Calculate items price
      state.itemsPrice = addDecimals(
        state.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)
      );

      //Calculate shipping price (If order is over Rs500 the free, else Rs 100 shipping)
      state.ShippingPrice = addDecimals(state.itemsPrice > 500 ? 0 : 100);

      //Calculate tax price
      state.taxPrice = addDecimals(Number(0.15 * state.itemsPrice).toFixed(2));

      //Calculate total price
      state.totalPrice = (
        Number(state.itemsPrice) +
        Number(state.shippingPrice) +
        Number(state.taxPrice)
      ).toFixed(2);

      localStorage.setItem("cart", JSON.stringify(state));
    },
  },
});

export const { addToCart } = cartSlice.actions;

==============================================================================================
Qty & Add To Cart Handler:

- quantity 

ProductScreen.jsx -
import { useState } from "react";

 return (
    <>
	{product.countInStock > 0 && (
	  <ListGroup.Item>
		<Row>
		  <Col>Qty</Col>
		  <Col>
			<Form.Control
			  as="select"
			  value={qty}
			  onChange={(e) => setQty(Number(e.target.value))}
			>
			  {[...Array(product.countInStock).keys()].map((x) => (
				<option key={x + 1} value={x + 1}>
				  {x + 1}
				</option>
			  ))}
			</Form.Control>
		  </Col>
		</Row>
	  </ListGroup.Item>
	)}
    </>
  );

Inspect > Components > Hover to components > Check state 

----------------------------------------------------------------------------------------------
- add to handler

ProductScreen.jsx -
import { useParams, useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { addToCart } from "../slices/cartSlice";


const dispatch = useDispatch(1);
const navigate = useNavigate();

const addToCartHandler = () => {
dispatch(addToCart({ ...product, qty }));
navigate("/cart");
};

<Button
	className="btn-block"
	type="button"
	disabled={product.countInStock === 0}
	onClick={addToCartHandler}
>

Inspect > Redux > Cart/cartItems
Inspect > Application > LocalStorage > localhost:3000

==============================================================================================