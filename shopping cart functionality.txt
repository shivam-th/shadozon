Cart Slice & Reducer:

- create "cartSlice.js" under slices

cartSlice.js - 
import { createSlice } from "@reduxjs/toolkit";

const initialState = localStorage.getItem("cart")
  ? JSON.parse(localStorage.getItem("cart"))
  : { cartItems: [] };

const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {},
});

export default cartSlice.reducer;


store.js -
import cartSliceReducer from "./slices/cartSlice";
reducer: {
[apiSlice.reducerPath]: apiSlice.reducer,
cart: cartSliceReducer,
},

==============================================================================================
Add to Cart Function:

cartSlice.js -

const addDecimals = (num) => {
  return (Math.round(num * 100) / 100).toFixed(2);
};
const cartSlice = createSlice({
  reducers: {
    addToCart: (state, action) => {
      const item = action.payload;
      const existItem = state.cartItems.find((x) => x._id === item._id);

      if (existItem) {
        state.cartItems = state.cartItems.map((x) =>
          x._id === existItem._id ? item : x
        );
      } else {
        state.cartItems = [...state.cartItems, item];
      }

      //Calculate items price
      state.itemsPrice = addDecimals(
        state.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)
      );

      //Calculate shipping price (If order is over Rs500 the free, else Rs 100 shipping)
      state.shippingPrice = addDecimals(state.itemsPrice > 500 ? 0 : 100);

      //Calculate tax price
      state.taxPrice = addDecimals(Number(0.15 * state.itemsPrice).toFixed(2));

      //Calculate total price
      state.totalPrice = (
        Number(state.itemsPrice) +
        Number(state.shippingPrice) +
        Number(state.taxPrice)
      ).toFixed(2);

      localStorage.setItem("cart", JSON.stringify(state));
    },
  },
});

export const { addToCart } = cartSlice.actions;

==============================================================================================
Qty & Add To Cart Handler:

- quantity 

ProductScreen.jsx -
import { useState } from "react";

 return (
    <>
	{product.countInStock > 0 && (
	  <ListGroup.Item>
		<Row>
		  <Col>Qty</Col>
		  <Col>
			<Form.Control
			  as="select"
			  value={qty}
			  onChange={(e) => setQty(Number(e.target.value))}
			>
			  {[...Array(product.countInStock).keys()].map((x) => (
				<option key={x + 1} value={x + 1}>
				  {x + 1}
				</option>
			  ))}
			</Form.Control>
		  </Col>
		</Row>
	  </ListGroup.Item>
	)}
    </>
  );

Inspect > Components > Hover to components > Check state 

----------------------------------------------------------------------------------------------
- add to handler

ProductScreen.jsx -
import { useParams, useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { addToCart } from "../slices/cartSlice";


const dispatch = useDispatch(1);
const navigate = useNavigate();

const addToCartHandler = () => {
dispatch(addToCart({ ...product, qty }));
navigate("/cart");
};

<Button
	className="btn-block"
	type="button"
	disabled={product.countInStock === 0}
	onClick={addToCartHandler}
>

Inspect > Redux > Cart/cartItems > price01
Inspect > Application > LocalStorage > localhost:3000

==============================================================================================
Cart Utils File:

- create "utils" folder under src

- create "cartUtils.js" file under utils

cartUtils.js - 
const addDecimals = (num) => {
  return (Math.round(num * 100) / 100).toFixed(2);
};

export const updateCart = (state) => {
  //Calculate items price
  state.itemsPrice = addDecimals(
    state.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)
  );

  //Calculate shipping price (If order is over Rs500 the free, else Rs 100 shipping)
  state.shippingPrice = addDecimals(state.itemsPrice > 500 ? 0 : 100);

  //Calculate tax price
  state.taxPrice = addDecimals(Number((0.15 * state.itemsPrice).toFixed(2)));

  //Calculate total price
  state.totalPrice = (
    Number(state.itemsPrice) +
    Number(state.shippingPrice) +
    Number(state.taxPrice)
  ).toFixed(2);

  localStorage.setItem("cart", JSON.stringify(state));
  return state;
};


cartSlice.js -
- remove below code
const addDecimals = (num) => {
  return (Math.round(num * 100) / 100).toFixed(2);
};

//Calculate items price
state.itemsPrice = addDecimals(
state.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)
);

//Calculate shipping price (If order is over Rs500 the free, else Rs 100 shipping)
state.shippingPrice = addDecimals(state.itemsPrice > 500 ? 0 : 100);

//Calculate tax price
state.taxPrice = addDecimals(
Number((0.15 * state.itemsPrice).toFixed(2))
);

//Calculate total price
state.totalPrice = (
Number(state.itemsPrice) +
Number(state.shippingPrice) +
Number(state.taxPrice)
).toFixed(2);

localStorage.setItem("cart", JSON.stringify(state));

- add below code
import { updateCart } from "../utils/cartUtils";
return updateCart(state);
==============================================================================================
Item Count In Header:

CartScreen.jsx - 
import { Badge} from "react-bootstrap";
import { useSelector } from "react-redux";

const Header = () => {
const { cartItems } = useSelector((state) => state.cart);
return (
<header>
<LinkContainer to="/cart">
<Nav.Link>
  <FaShoppingCart /> Cart
  {cartItems.length > 0 && (
	<Badge pill bg="success" style={{ marginLeft: "5px" }}>
	  {cartItems.reduce((a, c) => a + c.qty, 0)}
	</Badge>
  )}
</Nav.Link>
</LinkContainer>
</header>
)}
		
==============================================================================================
Cart Screen:

- create "CartScreen.jsx" under screens

CartScreen.jsx -
import { Link, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {
  Row,
  Col,
  ListGroup,
  Image,
  Form,
  Button,
  Card,
} from "react-bootstrap";
import { FaTrash } from "react-icons/fa";
import Message from "../components/Message";
import { addToCart, removeFromCart } from "../slices/cartSlice";

const CartScreen = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const cart = useSelector((state) => state.cart);
  const { cartItems } = cart;

  const addToCartHandler = async (product, qty) => {
    dispatch(addToCart({ ...product, qty }));
  };

  const removeFromCartHandler = async (id) => {
    dispatch(removeFromCart(id));
  };

  const checkoutHandler = () => {
    navigate("/login?redirect=/shipping");
  };

  return (
    <Row>
      <Col md={8}>
        <h1 style={{ marginBottom: "20px" }}>Shopping Cart</h1>
        {cartItems.length === 0 ? (
          <Message>
            Your Cart is empty <Link to="/"> Go Back</Link>
          </Message>
        ) : (
          <ListGroup variant="flush">
            {cartItems.map((item) => (
              <ListGroup.Item key={item._id}>
                <Row>
                  <Col md={2}>
                    <Image src={item.image} alt={item.name} fluid rounded />
                  </Col>
                  <Col md={3}>
                    <Link to={` /product/${item._id}`}> {item.name} </Link>
                  </Col>
                  <Col md={2}>Rs {item.price}</Col>
                  <Col md={2}>
                    <Form.Control
                      as="select"
                      value={item.qty}
                      onChange={(e) =>
                        addToCartHandler(item, Number(e.target.value))
                      }
                    >
                      {[...Array(item.countInStock).keys()].map((x) => (
                        <option key={x + 1} value={x + 1}>
                          {x + 1}
                        </option>
                      ))}
                    </Form.Control>
                  </Col>
                  <Col md={2}>
                    <Button
                      type="button"
                      variant="light"
                      onClick={() => removeFromCartHandler(item._id)}
                    >
                      <FaTrash />
                    </Button>
                  </Col>
                </Row>
              </ListGroup.Item>
            ))}
          </ListGroup>
        )}
      </Col>
      <Col md={4}>
        <Card>
          <ListGroup variant="flush">
            <ListGroup.Item>
              <h2>
                Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})
                items
              </h2>
              $
              {cartItems
                .reduce((acc, item) => acc + item.qty * item.price, 0)
                .toFixed(2)}
            </ListGroup.Item>
            <ListGroup.Item>
              <Button
                type="button"
                className="btn-block"
                disabled={cartItems.length === 0}
                onClick={checkoutHandler}
              >
                Proceed to Checkout
              </Button>
            </ListGroup.Item>
          </ListGroup>
        </Card>
      </Col>
    </Row>
  );
};

export default CartScreen;


==============================================================================================
Remove from cart:

cartSlice.js -
removeFromCart: (state, action) => {
  state.cartItems = state.cartItems.filter((x) => x._id != action.payload);
  return updateCart(state);
},
	

CartScreen.jsx -
import { addToCart, removeFromCart } from "../slices/cartSlice";

const removeFromCartHandler = async (id) => {
dispatch(removeFromCart(id));
};

<Button type="button" variant="light" onClick={ () =>
removeFromCartHandler(item._id)}>
  <FaTrash />
</Button>
==============================================================================================