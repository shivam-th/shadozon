Use Routes & Controller:

- create userRoute.js under routes

- create userController.js under controller

userController.js -
import asyncHandler from "../middleware/asyncHandler.js";
import User from "../models/userModel.js";

// @desc    Auth user & get token
// @route   POST /api/users/login
// @access  Public
const authUser = asyncHandler(async (req, res) => {
  res.send("auth user");
});

// @desc    Register a new user
// @route   POST /api/users
// @access  Public
const registerUser = asyncHandler(async (req, res) => {
  res.send("register user");
});

// @desc    Logout user / clear cookie
// @route   POST /api/users
// @access  Private
const logoutUser = asyncHandler(async (req, res) => {
  res.send("logout user");
});

// @desc    Get user profile
// @route   GET /api/users/profile
// @access  Private
const getUserProfile = asyncHandler(async (req, res) => {
  res.send("get user profile");
});

// @desc    Update user profile
// @route   PUT /api/users/profile
// @access  Private
const updateUserProfile = asyncHandler(async (req, res) => {
  res.send("update user profile");
});

// @desc    Get all users
// @route   GET /api/users
// @access  Private/Admin
const getUsers = asyncHandler(async (req, res) => {
  res.send("get users");
});

// @desc    Delete user
// @route   DELETE /api/users/:id
// @access  Private/Admin
const deleteUser = asyncHandler(async (req, res) => {
  res.send("delete user");
});

// @desc    Get user by ID
// @route   GET /api/users/:id
// @access  Private/Admin
const getUserById = asyncHandler(async (req, res) => {
  res.send("get user by id");
});

// @desc    Update user
// @route   PUT /api/users/:id
// @access  Private/Admin
const updateUser = asyncHandler(async (req, res) => {
  res.send("update user");
});

export {
  authUser,
  registerUser,
  logoutUser,
  getUserProfile,
  updateUserProfile,
  getUsers,
  deleteUser,
  getUserById,
  updateUser,
};


userRoute.js - 
import express from 'express';
import {
  authUser,
  registerUser,
  logoutUser,
  getUserProfile,
  updateUserProfile,
  getUsers,
  deleteUser,
  getUserById,
  updateUser,
} from '../controllers/userController.js';

const router = express.Router();

router.route("/").post(registerUser).get(getUsers);
router.post("/login", authUser);
router.post("/logout", logoutUser);
router.route("/profile").get(getUserProfile).put(updateUserProfile);
router.route("/:id").delete(deleteUser).get(getUserById).put(updateUser);

export default router;


app.js -
import userRoutes from "./routes/userRoutes.js";
app.use('/api/users', userRoutes);


Postman - 
Collections > Create "Users" under ShadoZon
Create request "Auth User" > Select POST > {{baseURL}}/users/login
Create request "Register" > Select POST > {{baseURL}}/users
Create request "Logout User" > Select POST > {{baseURL}}/users/logout
Create request "Get User profile" > Select GET > {{baseURL}}/users/profile
Create request "Update User profile" > Select POST > {{baseURL}}/users/profile

Collections > Create "Admin" under Users
Create request "New Request" > Select GET > {{baseURL}}/users
Create request "Get User By Id " > Select DELETE > {{baseURL}}/users/:id
Create request "Delete User" > Select DELETE > {{baseURL}}/users/:id
Create request "Update User" > Select UPDATE > {{baseURL}}/users/:id
==============================================================================================
User Email & Password Validation:

userController.js -
const authUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });

  if (user && (await user.matchPassword(password))) {
    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      isAdmin: user.isAdmin,
    });
  } else {
    res.status(401);
    throw new Error("Invalid email or password");
  }
  res.send("auth user");
});


userModel.js -
import bcrypt from "bcryptjs";

userSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};


app.js -
// Body parser middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));


Postman -
Users/AuthUser > Body - x-www-form-urlencoded
Key - email > Value - shivam@gmail.com
Key - password > Value - 12345678
==============================================================================================


