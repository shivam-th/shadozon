Redux Store & API Slice:

- install redux library in frontend
>> npm i @reduxjs/toolkit react-redux

----------------------------------------------------------------------------------------------
- create "store.js" file under src

store.js -
import { configureStore } from "@reduxjs/toolkit";

const store = configureStore({
  reducer: {},
});

export default store;


index.js -
import { Provider } from "react-redux";
import store from "./store";
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <RouterProvider router={router} />
    </Provider>
  </React.StrictMode>
);

Inspect > Redux

----------------------------------------------------------------------------------------------
- create "constants.js" file under src

constants.js - 
export const BASE_URL =
  process.env.NODE_ENV === "development" ? "http://localhost:5000" : "";
export const PRODUCT_URL = "/api/products";
export const USERS_URL = "/api/users";
export const ORDERS_URL = "/api/orders";
export const PAYPAL_URL = "/api/config/paypal";

----------------------------------------------------------------------------------------------
- create "slices" folder under src

- create "apiSlice.js" file under slices

apiSlice.js -
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "../constants";

const baseQuery = fetchBaseQuery({ baseURL: BASE_URL });

export const apiSlice = createApi({
  baseQuery,
  tagTypes: ["Product", "Order", "User"],
  endpoints: (builder) => ({}),
});


store.js -
import { apiSlice } from "./slices/apiSlice";
const store = configureStore({
  reducer: {
    [apiSlice.reducerPath]: apiSlice.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(apiSlice.middleware),
  devTools: true,
});

Inspect > Redux
==============================================================================================
Products API Slice & Get Products Endpoint:

- create "productApiSlice.js" file under slices

productApiSlice.js - 
import { PRODUCT_URL } from "../constants";
import { apiSlice } from "./apiSlice";

export const productsApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    getProducts: builder.query({
      query: () => ({
        url: PRODUCT_URL,
      }),
      keepUnusedDataFor: 5,
    }),
  }),
});

export const { useGetProductsQuery } = productsApiSlice;


HomeScreen.jsx -
- remove below code
import { useEffect, useState } from "react";
import axios from "axios";

const [products, setProducts] = useState([]);

useEffect(() => {
const fetchProducts = async () => {
  const { data } = await axios.get("/api/products");
  setProducts(data);
};

fetchProducts();
}, []);


- add below code
import { useGetProductsQuery } from "../slices/productsApiSlice";
const HomeScreen = () => {
  const { data: products, isLoading, error } = useGetProductsQuery();

  return (
    <>
      {isLoading ? (
        <h2> Loading...</h2>
      ) : error ? (
        <div> {error?.data?.message || error.error}</div>
      ) : (
        <>
          <h1> Latest product</h1>
          <Row>
            {products.map((product) => (
              <Col key={product._id} sm={12} md={6} lg={4} xl={3}>
                <Product product={product} />
              </Col>
            ))}
          </Row>
        </>
      )}
    </>
  );
}

==============================================================================================
Get Product Details Endpoint:

ProductApiSlice.js -
getProductDetails: builder.query({
  query: (productId) => ({
	url: `${PRODUCTS_URL}/${productId}`,
  }),
  keepUnusedDataFor: 5,
}),
	
	
ProductScreen.jsx -
- remove below code
import axios from "axios";
import { useEffect, useState } from "react";

const [product, setProducts] = useState([]);

useEffect(() => {
const fetchProduct = async () => {
  const { data } = await axios.get(`/api/products/${productId}`);
  setProducts(data);
};
fetchProduct();
}, [productId]);

- add below code
import { useGetProductDetailsQuery } from "../slices/productsApiSlice";

const { id: productId } = useParams();
const {
data: product,
isLoading,
error,
} = useGetProductDetailsQuery(productId);

  {isLoading ? (
	<h2> Loading...</h2>
  ) : error ? (
	<div> {error?.data?.message || error.error}</div>
  ) : (
	<Row>
	  <Col md={5}>
		<Image src={product.image} alt={product.name} fluid />
	  </Col>
	</Row>
  )}
export const { useGetProductDetailsQuery } =productsApiSlice;
==============================================================================================
Loader & Message Components:

- create "Loader.jsx" under component

Loader.jsx - 
import { Spinner } from "react-bootstrap";

const Loader = () => {
  return (
    <Spinner
      animation="border"
      role="status"
      style={{
        width: "100px",
        height: "100px",
        margin: "auto",
        display: "block",
      }}
    ></Spinner>
  );
};

export default Loader;


HomeScreen.jsx & ProductScreen.jsx - 
- remove below code
<h2> Loading...</h2>

- add below code
import Loader from "../components/Loader";
<Loader/>

----------------------------------------------------------------------------------------------
- create "Message.jsx" under component

Message.jsx -
import { Alert } from "react-bootstrap";

const Message = ({ variant, children }) => {
  return <Alert variant={variant}>{children}</Alert>;
};

Message.defaultProps = {
  variant: "info",
};

export default Message;


HomeScreen.jsx & ProductScreen.jsx - 
- remove below code
<div> {error?.data?.message || error.error}</div>

- add below code
<Message variant="danger">{" "}{error?.data?.message || error.error}</Message>
==============================================================================================